Chapter 4: Understanding Ownership

** What is Ownership **

- Ownership is a set of rules that govern how a Rust program manages memory.

-Ownership rules 
    - Each value in Rust has an owner.
    - There can only be one owner at a time.
    - When the owner goes out of scope, the value will be dropped.
    
- When we move a simple value such as an integer from one owner to another we can do so quickly

- However when we want to move a String or more complex object, it becomes important to understand the complexities.

- A shallow copy of String will copy the ptr, len and size of the allocated heap over and previous owner is invalid.

- However we can also do a deep copy with .clone() in which new heap space is allocated for the object and both owners remain valid.

- If a type implements the 'copy' trait values are never movied and are copied, keeping owners valid.

- The Following will implement the Copy Trait by defualt
    - All the integer types, such as u32.
    - The Boolean type, bool, with values true and false.
    - All the floating-point types, such as f64.
    - The character type, char.
    - Tuples, if they only contain types that also implement Copy. For example, (i32, i32) implements Copy, but (i32, String) does not.

- In Rust we can return many values using tuples.

** Referencing and Borrowing

- Using Referencing we can pass values into functions without giving up Ownership.

- Note that these references cannot be used to change the value they pointed to as they are borrowed (Can use mut ref)

- Mutable references have one big restriction, you can only have one mutable reference to a value.

- We cannot have a mutable and immutable reference to the same value.

- Rust will not allow us to reference a value in memory that is no longer there ie a 'dangling pointer'