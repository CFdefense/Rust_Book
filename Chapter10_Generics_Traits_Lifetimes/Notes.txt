** Generics **

- Generics allow for us to reuse functions and logic for multiple types 

- When defining a function that uses generics, we place the generics in the signature of the function

- If we want to find the largest of some type, and dont use generics we need to reuse code logic for each type

- we cannot compare all types with '>' only those which implement std::cmp::PartialOrd, traits and generics work hand in hand

- We can declare generic types, function types, method types and struct types among others

** Traits **

- A trait defines the functionality a particular type has and can share with other types.

- Different types share the same behavior if we can call the same methods on all of those types. 

- Trait definitions are a way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.

- A trait can have multiple methods in its body: the method signatures are listed one per line, and each line ends in a semicolon.

- The compiler will enforce that any type that has the Summary trait will have the method summarize defined with this signature exactly.

- Default implementations can call other methods in the same trait, even if those other methods don’t have a default implementation

- We can also pass traits as function paramters (very similiar to inferfaces in typescript)

** Lifetimes **

- The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it’s intended to reference. 

- The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid. 

- Lifetimes refer to the scope in which a reference is valid, rust will require you to annotate these reference lifetimes if it is unsure

- Structs, functions, variables and many more can be declared with lifetime annotations

- Rust lifetime function annotations do not change the lifetime of refernces passed but rather the compiler will enforce that such passed references follow the annotation rules

- Lifetime elision rules refer to a set of particular patterns that the compiler will consider and allow for a user to skip annotating lifetimes

- Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.

- The compiler uses 3 rules to infer lifetimes, the first applies to the input lifetimes, and the second and third refer to the output lifetimes.

- If the compiler gets to the end of the three rules and there are still references for which it can’t figure out lifetimes, the compiler will stop with an error.

- 1. The compiler assigns a lifetime parameter to each parameter that’s a reference. In other words, a function with one parameter gets one lifetime parameter. "fn foo<'a>(x: &'a i32)"

- 2. if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: fn foo<'a>(x: &'a i32) -> &'a i32.

- 3. The third rule is that, if there are multiple input lifetime parameters, but one of them is &self or &mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters.

- Lifetime names for struct fields always need to be declared after the impl keyword and then used after the struct’s name because those lifetimes are part of the struct’s type.